from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from handlers.callback_handlers import callback_handler
from handlers.command_handlers import command_handler

from utils.button_dialog_model import send_keyboard

from handlers.role_check import check_role_decorator, is_allowed_user, is_user_teacher


PARSE_MODE = "MarkDownV2"
INSTRUCTION = "_–©–æ–± –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ\, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ 1 mp3 —Ñ–∞–π–ª –≤ —á–∞—Ç_üëá\n_–ë–∞–∂–∞–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É \- –¥–æ 4 MB_"
TEXT = INSTRUCTION
CREATE_VICTORYNA_BUTTON = "–°—Ç–≤–æ—Ä–∏—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É"
MY_VICTORYNAS_BUTTON = "–ú–æ—ó –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏"
MY_AUDIOS_BUTTON = "–ú–æ—ó –∞—É–¥—ñ–æ"


@check_role_decorator(allowed_role_checker_list=[is_allowed_user, is_user_teacher])
@command_handler
@callback_handler
async def menu(update: Update, context: CallbackContext):
    # clean stateful conversation first if present
    for key in list(context.user_data.keys()):
        if key.startswith("current"):
            context.user_data.pop(key)

    buttons = [
        [
            InlineKeyboardButton(
                CREATE_VICTORYNA_BUTTON,
                callback_data="create_victoryna",
            )
        ],
        [
            InlineKeyboardButton(
                MY_VICTORYNAS_BUTTON,
                callback_data="my_victorynas",
            )
        ],
        [
            InlineKeyboardButton(
                MY_AUDIOS_BUTTON,
                callback_data="my_audios",
            )
        ],
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    return await send_keyboard(
        update, context, keyboard, text=TEXT, parse_mode=PARSE_MODE
    )
